{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroller.js","containers/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","input","className","src","alt","replace","Cardlist","renderedList","split","map","userName","id","trim","key","SearchBox","onSearchChange","onChange","type","placeholder","Scroller","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","event","console","log","target","value","searchField","fetch","then","response","json","result","rob","user","name","join","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCLSC,G,MAXJ,SAAC,GAAW,IAAVC,EAAS,EAATA,MACT,MAAe,KAARA,EAAW,8BACjB,yBAAKC,UAAW,sDACb,yBAAKC,IAAK,wBAAwBF,EAAOG,IAAK,UAC9C,6BACI,4BAAKH,GACL,2BAAIA,EAAMI,QAAQ,IAAI,KAAK,kBCMxBC,EAXA,SAAC,GAAW,IAEjBC,EAFgB,EAATN,MACKO,MAAM,KACCC,KAAI,SAACC,EAASC,GACnC,OAAO,kBAAC,EAAD,CAAMV,MAAOS,EAASE,OAAQC,IAAKF,OAG9C,OAAO,6BAAMJ,ICEFO,EATC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,eAEd,OAAM,yBAAKb,UAAW,OAClB,2BAAOc,SAAUD,EAAgBb,UAAW,mCAAoCe,KAAM,OAC/EC,YAAa,oBCIbC,EARA,SAACC,GACd,OAAO,yBAAKC,MAAO,CAACC,UAAU,SAAWC,OAAO,kBAAmBC,OAAO,UACrEJ,EAAMK,WCqBEC,E,kDArBX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,UAAS,GAHJ,E,8DAOKC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAIG,KAAKJ,MAAMC,SACJ,+EAEAG,KAAKX,MAAMK,a,GAhBHQ,aC2CZC,E,kDAnCb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAgBRL,eAAe,SAACoB,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKP,SAAS,CAACQ,YAAYL,EAAMG,OAAOC,SAjBxC,EAAKZ,MAAM,CACTa,YAAY,GACZvC,MAAM,IAJS,E,gEAOE,IAAD,OAClBwC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GACrF,IAEMC,EAFOD,EAAOpC,KAAI,SAACsC,GAAS,OAAOA,EAAKC,QAE7BC,KAAK,KACtB,EAAKjB,SAAS,CAAC/B,MAAM6C,S,+BAWzB,IAAM7C,EAA+B,KAAzB8B,KAAKJ,MAAMa,YAAkBT,KAAKJ,MAAM1B,MAAM8B,KAAKJ,MAAMa,YACrE,OAAO,yBAAKtC,UAAU,UACpB,wBAAIA,UAAW,aAAf,mBACA,kBAAC,EAAD,CAAWa,eAAgBgB,KAAKhB,iBAEf,KAAfd,EAAMW,OAAa,wEAAkD,kBAAC,EAAD,KAAU,kBAAC,EAAD,SAAe,kBAAC,EAAD,CAAUX,MAAOA,KAA1C,U,GA7B3DgC,aCFlBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACF,kBAAC,EAAD,MADE,MAEAC,SAASC,eAAe,SPyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLO,QAAQP,MAAMA,EAAMgC,a","file":"static/js/main.c672acc5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card=({input})=>{\r\n    return input===\"\"?<div/>:\r\n     <div className={\" bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5 tc\"}>\r\n        <img src={'https://robohash.org/'+input} alt={'robot'}/>\r\n        <div>\r\n            <h2>{input}</h2>\r\n            <p>{input.replace(' ','_')+'@gmail.com'}</p>\r\n        </div>\r\n    </div>\r\n\r\n};\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist=({input})=>{\r\n    const users=input.split(\",\");\r\n    const renderedList=users.map((userName,id)=>{\r\n        return <Card input={userName.trim()} key={id}/>;\r\n\r\n    });\r\n    return <div>{renderedList}</div>;\r\n\r\n\r\n\r\n};\r\nexport default Cardlist;","import React from \"react\";\r\n\r\nconst SearchBox=({onSearchChange})=>{\r\n\r\n    return<div className={'pa2'}>\r\n        <input onChange={onSearchChange} className={'pa3 ba b--green bg-lightest-blue'} type={'text'}\r\n               placeholder={'search robots'}/>\r\n    </div>\r\n\r\n\r\n};\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroller=(props)=>{\r\n  return <div style={{overflowY:'scroll' , border:'5px solid black', height:'600px'  } }>\r\n      {props.children}\r\n  </div>;\r\n\r\n\r\n\r\n};\r\nexport default Scroller;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            hasError:false\r\n        }\r\n\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError:true})\r\n    }\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Ooooooooooooops there's been some  errors !!!!!</h1>\r\n        }else\r\n            return this.props.children;\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Cardlist from \"../components/Cardlist\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroller from \"../components/Scroller\";\r\nimport ErrorBoundry from \"./ErrorBoundry\";\r\n\r\n\r\n\r\nclass App extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      searchField:'',\r\n      input:''\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(result=>{\r\n        const robots=result.map((user)=>{ return user.name;\r\n        });\r\n        const rob=robots.join(',');\r\n        this.setState({input:rob});\r\n\r\n    })\r\n  }\r\n\r\n  onSearchChange=(event)=>{\r\n    console.log(event.target.value);\r\n    this.setState({searchField:event.target.value});\r\n  };\r\n\r\n  render (){\r\n    const input=this.state.searchField===''? this.state.input:this.state.searchField;\r\n    return <div className=\"App tc\">\r\n      <h1 className={'tc f1 red'}>Robots Searcher</h1>\r\n      <SearchBox onSearchChange={this.onSearchChange}/>\r\n      {\r\n        input.trim()===\"\"? <h1>Type Robots names Separated by comma ','</h1>:<Scroller><ErrorBoundry> <Cardlist input={input}/></ErrorBoundry> </Scroller>\r\n\r\n      }\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./containers/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n<App/>  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}