{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/Scroller.js","containers/ErrorBoundry.js","components/SearchBox.js","containers/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","robot","className","src","alt","replace","Cardlist","renderedList","robots","split","map","userName","id","trim","key","Scroller","nextProps","nextState","nextContext","style","overflowY","border","height","this","props","children","Component","ErrorBoundry","hasError","errorInfo","setState","SearchBox","onSearchChange","onChange","type","placeholder","Header","App","onRequestRobots","searchField","connect","searchRobots","requestRobots","isPending","dispatch","event","payload","target","value","fetch","response","json","result","rob","user","name","join","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","publicUrl","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e6da4bfd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    console.log(\"service worker well registered\");\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card=({robot})=>{\r\n    return robot===\"\"?null:\r\n     <div className={\" bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5 tc\"}>\r\n        <img src={'https://robohash.org/'+robot} alt={'robot'}/>\r\n        <div>\r\n            <h2>{robot}</h2>\r\n            <p>{robot.replace(' ','_')+'@gmail.com'}</p>\r\n        </div>\r\n    </div>\r\n\r\n};\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist=({robots})=>{\r\n    const users=robots.split(\",\");\r\n    const renderedList=users.map((userName,id)=>{\r\n        return <Card robot={userName.trim()} key={id}/>;\r\n\r\n    });\r\n    return <div>{renderedList}</div>;\r\n\r\n\r\n\r\n};\r\nexport default Cardlist;","import React, {Component} from \"react\";\r\n\r\nclass Scroller extends Component{\r\n\r\nshouldComponentUpdate(nextProps, nextState, nextContext) {\r\n  return false;\r\n}\r\n\r\n  render() {\r\n  return <div style={{overflowY:'scroll' , border:'5px solid black', height:'600px'  } }>\r\n    {this.props.children}\r\n  </div>;\r\n}\r\n}\r\nexport default Scroller;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            hasError:false\r\n        }\r\n\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError:true})\r\n    }\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Ooooooooooooops there's been some  errors !!!!!</h1>\r\n        }else\r\n            return this.props.children;\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default ErrorBoundry;","import React from \"react\";\r\n\r\nconst SearchBox =({onSearchChange})=>{\r\n\r\n    return<div className={'pa2'}>\r\n        <input onChange={onSearchChange} className={'pa3 ba b--green bg-lightest-blue'} type={'text'}\r\n               placeholder={'search robots'}/>\r\n    </div>\r\n\r\n};\r\nexport default SearchBox;","import React, {Component} from \"react\";\r\nimport SearchBox from \"../components/SearchBox\";\r\n\r\nclass Header extends Component{\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return<div>\r\n            <SearchBox onSearchChange={this.props.onSearchChange}/>\r\n            <h1>Robots Searcher</h1>\r\n        </div>\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Cardlist from \"../components/Cardlist\";\r\nimport Scroller from \"../components/Scroller\";\r\nimport ErrorBoundry from \"./ErrorBoundry\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {setSearchField,requestRobots} from \"../actions\";\r\nimport Header from \"./Header\";\r\n\r\nconst mapStateToProps=state=>{\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots:state.requestRobots.robots,\r\n    isPending:state.requestRobots.isPending,\r\n    error:state.requestRobots.error\r\n\r\n  }\r\n\r\n};\r\nconst mapDispatchToProps=dispatch=>{\r\nreturn {\r\n  onSearchChange: event=>dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: ()=>dispatch(requestRobots())\r\n}\r\n};\r\n\r\nclass App extends Component{\r\n\r\n  componentDidMount() {\r\n     this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n\r\n  render (){\r\n    const robots=this.props.searchField===''? this.props.robots:this.props.searchField;\r\n    return <div className=\"App tc\">\r\n      <Header onSearchChange={this.props.onSearchChange}/>\r\n      {\r\n        robots.trim()===\"\"? <h1>Type Robots names Separated by comma ','</h1>:<Scroller><ErrorBoundry> <Cardlist robots={robots}/></ErrorBoundry> </Scroller>\r\n\r\n      }\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_FAILED,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS\r\n} from './constants'\r\n\r\nexport const setSearchField=(text)=>( {type:CHANGE_SEARCH_FIELD, payload:text});\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(result=>{\r\n        const robots=result.map((user)=>{ return user.name; });\r\n        const rob=robots.join(',');\r\n        dispatch({type:REQUEST_ROBOTS_SUCCESS,payload: rob});\r\n    }).catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n};","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from './constants';\r\n\r\nconst initialStateSearch={\r\n    searchField:''\r\n};\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n           return  Object.assign({},state,{searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst initialStateRobots={\r\n    isPending:false,\r\n    robots:'',\r\n    error:''\r\n\r\n};\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n  switch (action.type) {\r\n      case REQUEST_ROBOTS_PENDING:\r\n          return Object.assign({},state,{isPending:true});\r\n      case REQUEST_ROBOTS_SUCCESS:\r\n         return  Object.assign({},state,{isPending: false,robots:action.payload});\r\n      case REQUEST_ROBOTS_FAILED:\r\n         return  Object.assign({},state,{isPending:false,error:action.payload});\r\n      default:\r\n          return state;\r\n\r\n  }\r\n\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./containers/App\";\r\nimport {createStore,applyMiddleware,combineReducers} from \"redux\";\r\nimport {searchRobots,requestRobots} from \"./reducers\";\r\nimport {createLogger} from \"redux-logger/src\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n\r\nconst rootReducer=combineReducers({searchRobots,requestRobots});\r\nconst logger=createLogger();\r\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger ));\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n<Provider store={store}><App /></Provider>  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}